com.socrata.spandex {
  port = 8042

  suggest-fuzziness = 0
  suggest-fuzziness-prefix = 1
  suggest-fuzziness-length = 3
  suggest-size = 10

  analysis {
    enabled = true
    lucene-version = "6.6.0"
    # https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-completion.html
    # basically the is the maximum length of a single input, for indexing purposes
    # will round down from this to end of previous token
    max-input-length = 64
    # this is NOT an elasticsearch config value; this is the max length for an individual shingle
    # except it's really this + whatever's left in the length of the current token
    max-shingle-length = 32
  }

  elastic-search {
    host = "localhost"
    port = 9300
    cluster-name = "spandex"
    index = "spandex"

    data-copy-batch-size = 10000
    data-copy-timeout = 60s

    settings =
      """{
           "analysis":{
             "analyzer":{
               "case_insensitive_keyword":{
                 "tokenizer":"keyword",
                 "filter":["lowercase"]
               },
               "case_insensitive_whitespace":{
                 "tokenizer":"whitespace",
                 "filter":["lowercase"]
               },
               "case_insensitive_word":{
                 "tokenizer":"word",
                 "filter":["lowercase"]
               }
             },
             "tokenizer":{
               "word":{
                 "type":"pattern",
                 "pattern":"[\\p{C}\\p{P}\\p{Sm}\\p{Sk}\\p{So}\\p{Z}&&[^\\&]]+",
                 "flags":"CASE_INSENSITIVE",
                 "group":-1
               }
             }
           }
         }"""

    # TODO - Move index mappings out of configuration.
    # They should be in some kind of bootstrap/migration script instead.
    mappings {
      dataset-copy {
        mapping-type="dataset_copy"
        mapping-properties="""{
          "_all": {
            "enabled": false
          },
          "properties": {
            "copy_number": {
              "type": "long"
            },
            "dataset_id": {
              "type": "keyword"
            },
            "stage": {
              "type": "keyword"
            },
            "version": {
              "type": "long"
            }
          }
        }"""
      }

      column-map {
        mapping-type="column_map"
        mapping-properties="""{
          "_all": {
            "enabled": false
          },
          "properties": {
            "copy_number": {
              "type": "long"
            },
            "dataset_id": {
              "type": "keyword"
            },
            "system_column_id": {
              "type": "long"
            },
            "user_column_id": {
              "type": "keyword"
            }
          }
        }
        """
      }

      field-value {
        mapping-type="field_value"
        mapping-properties="""{
          "_all": {
            "enabled": false
          },
          "properties": {
            "column_id": {
              "type": "long"
            },
            "composite_id": {
              "type": "keyword"
            },
            "copy_number": {
              "type": "long"
            },
            "dataset_id": {
              "type": "keyword"
            },
            "row_id": {
              "type": "long"
            },
            "raw_value": {
              "type": "keyword"
            },
            "suggest": {
              "type": "completion",
              "analyzer": "case_insensitive_word",
              "preserve_separators": false,
              "preserve_position_increments": false,
              "max_input_length": 50,
              "contexts": [
                {
                  "name": "composite_id",
                  "type": "category",
                  "path": "composite_id"
                }
              ]
            }
          }
        }
        """
       }
    }
  }

  log4j {
    rootLogger = [ INFO, console ]
  }
}
